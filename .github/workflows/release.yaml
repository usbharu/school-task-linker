# ワークフローの名前
name: Release Docker Image

# ワークフローが実行されるトリガーを指定
on:
  push:
    tags:
      - 'v*.*.*' # v1.0.0, v1.2.3 のようなタグがプッシュされたときに実行

# ジョブの実行に必要な権限を設定
permissions:
  contents: read
  packages: write

# 環境変数を定義
env:
  # イメージ名を定義 (例: your-docker-hub-username/school-task-linker)
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

# 実行するジョブを定義
jobs:
  # 'push-to-registry' という名前のジョブ
  push-to-registry:
    name: Build and Push Docker Image
    # 最新のUbuntu環境で実行
    runs-on: ubuntu-latest

    # ジョブのステップ
    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hubへログイン
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Dockerイメージのメタデータ（タグとラベル）を抽出
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Gitタグがセマンティックバージョニングの場合にタグを生成
            # 例: v1.2.3 -> 1.2.3, 1.2, 1
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # タグがプッシュされた場合に限り 'latest' タグを付与
            type=raw,value=latest,enable={{is_default_branch}}

      # 4. Java (JDK 17) をセットアップ
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 5. gradlewに実行権限を付与
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 6. Gradleを使ってfat JARをビルド
      - name: Build fat JAR with Gradle
        run: ./gradlew buildFatJar

      # 7. Dockerイメージのビルドとプッシュ
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          # metadata-actionで生成されたタグとラベルを使用
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
